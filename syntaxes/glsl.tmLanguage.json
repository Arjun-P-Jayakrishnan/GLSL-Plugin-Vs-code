{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "GLSL Shader Language",
  "scopeName": "source.glsl",
  "patterns": [
    { "include": "#keywords" },
    { "include": "#strings" },
    { "include": "#comments" },
    { "include": "#types" },
    { "include": "#qualifiers" },
    { "include": "#functions" },
    { "include": "#constants" },
    { "include": "#booleans" },
    { "include": "#preprocessor" },
    { "include": "#builtins" },
    { "include": "#constructor" },
    { "include": "#userfunctions" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-dash.glsl",
          "match": "//.*$"
        },
        {
          "name": "comment.block.glsl",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.glsl",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.glsl",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.flow.glsl",
          "match": "\\b(if|else|return|break|continue|discard)\\b"
        },
        {
          "name": "keyword.control.loop.glsl",
          "match": "\\b(for|while|do)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.glsl",
          "match": "\\b(void|bool|int|float|double|vec[2-4]|mat[2-4]|ivec[2-4]|bvec[2-4]|mat[2-4])\\b"
        }
      ]
    },
    "qualifiers": {
      "patterns": [
        {
          "name": "storage.modifier.glsl",
          "match": "\\b(uniform|attribute|varying|const|in|out|inout|layout|buffer|shared|coherent|volatile|restrict|readonly|writeonly)\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "support.function.glsl",
          "match": "\\b(abs|sign|floor|ceil|fract|mod|min|max|clamp|mix|step|smoothstep|length|distance|dot|cross|normalize|reflect|refract|faceforward|sin|cos|tan|asin|acos|atan|radians|degrees|exp|log|exp2|log2|sqrt|inversesqrt|pow)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.glsl",
          "match": "[-+]?(\\d*\\.\\d+|\\d+)([eE][-+]?\\d+)?"
        }
      ]
    },
    "booleans": {
      "patterns": [
        {
          "name": "constant.language.boolean.glsl",
          "match": "\\b(true|false)\\b"
        }
      ]
    },
    "preprocessor": {
      "patterns": [
        {
          "name": "meta.preprocessor.glsl",
          "match": "^\\s*#\\s*(define|undef|if|ifdef|ifndef|else|elif|endif|include|version|extension|line|error|pragma)\\b"
        }
      ]
    },
    "builtins": {
      "patterns": [
        {
          "name": "variable.language.glsl",
          "match": "\\bgl_[A-Za-z0-9_]*\\b"
        }
      ]
    },
    "constructor": {
      "patterns": [
        {
          "name": "support.type.constructor.glsl",
          "match": "\\b(void|bool|int|float|double|vec[2-4]|ivec[2-4]|bvec[2-4]|mat[2-4])(?=\\s*\\()"
        }
      ]
    },
    "userfunctions": {
      "patterns": [
        {
          "name": "entity.name.function.glsl",
          "match": "\\b[A-Za-z_][A-Za-z0-9_]*\\b(?=\\s*\\()"
        }
      ]
    }
  }
}
